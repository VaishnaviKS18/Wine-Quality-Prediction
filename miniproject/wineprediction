import numpy as np
import pandas as pd
from tkinter import Tk, Label, Entry, Button, messagebox
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam

# Load the dataset
try:
    wine_dataset = pd.read_csv('G:/7th Sem/neural network/miniproject/winequality-red.csv')
except FileNotFoundError:
    raise FileNotFoundError("Dataset not found at specified path. Please update the file path.")

# Separate the data and Label
X = wine_dataset.drop('quality', axis=1)
Y = wine_dataset['quality'].apply(lambda y_value: 1 if y_value >= 7 else 0)

# Split the dataset into training and testing data
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=3)

# Normalize the features
X_train = X_train / X_train.max()
X_test = X_test / X_test.max()

# Build the Sequential Neural Network model
model = Sequential([
    Dense(64, input_shape=(X_train.shape[1],), activation='relu'),
    Dense(32, activation='relu'),
    Dense(16, activation='relu'),
    Dense(1, activation='sigmoid')  # Output layer for binary classification
])

# Compile the model
model.compile(optimizer=Adam(learning_rate=0.001), loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(X_train, Y_train, validation_data=(X_test, Y_test), epochs=50, batch_size=32, verbose=1)

# Evaluate the model
loss, accuracy = model.evaluate(X_test, Y_test, verbose=0)
y_pred = (model.predict(X_test) > 0.5).astype("int32")  # Convert probabilities to binary predictions

print(f"Accuracy on Test Set: {accuracy:.2f}")
print("Classification Report:\n", classification_report(Y_test, y_pred))

# Tkinter application
def predict_quality():
    input_data = entry.get()
    try:
        # Parse and preprocess input
        input_data_as_numpy_array = np.asarray([float(value) for value in input_data.split(",")])

        # Validate input
        if len(input_data_as_numpy_array) != X.shape[1]:
            messagebox.showerror("Error", f"Expected {X.shape[1]} features, but got {len(input_data_as_numpy_array)}")
            return

        # Normalize and reshape the data for prediction
        input_data_as_numpy_array = input_data_as_numpy_array / X.max().values  # Normalize
        input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)
        prediction = model.predict(input_data_reshaped)

        # Display the result
        if prediction[0] > 0.5:
            messagebox.showinfo("Prediction Result", "Good Quality Wine")
        else:
            messagebox.showinfo("Prediction Result", "Bad Quality Wine")
    except ValueError:
        messagebox.showerror("Error", "Invalid input! Please enter numeric values separated by commas.")

# Create the Tkinter GUI
root = Tk()
root.title("Wine Quality Prediction")
root.geometry("400x200")

# Widgets
Label(root, text="Enter wine features (comma-separated):", font=("Arial", 12)).pack(pady=10)
entry = Entry(root, width=50)
entry.pack(pady=5)

Button(root, text="Predict", command=predict_quality, bg="blue", fg="white").pack(pady=10)

# Run the application
root.mainloop()
